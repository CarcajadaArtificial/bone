@use 'true' as *;
@use '../src/throw';
@use '../src/media-queries' as mq;

@include test-module('media-queries') {
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // mq.only-on($breakpoint) [Mixin]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('only-on()') {
    // Middle breakpoint
    @include it('Creates a media query when the input is correct.') {
      @include assert() {
        @include output() {
          @media #{mq.only-on(md)} {
            display: block;
          }
        }

        @include expect() {
          @media screen and (min-width: 40em) and (max-width: 99.9375em) {
            display: block;
          }
        }
      }
    }
    // Smallest
    @include it(
      'Creates a max-width media query when the input is the smallest breakpoint.'
    ) {
      @include assert() {
        @include output() {
          @media #{mq.only-on(sm)} {
            display: block;
          }
        }

        @include expect() {
          @media screen and (max-width: 39.9375em) {
            display: block;
          }
        }
      }
    }
    // Largest
    @include it(
      'Creates a min-width media query when the input is the largest breakpoint.'
    ) {
      @include assert() {
        @include output() {
          @media #{mq.only-on(lg)} {
            display: block;
          }
        }

        @include expect() {
          @media screen and (min-width: 100em) {
            display: block;
          }
        }
      }
    }
    // Incorrect
    @include it(
      '[Indexing Error] Throws when $breakpoint is not a key in $breakpoints.'
    ) {
      @include assert-equal(
        mq.only-on(asdf),
        throw.error(throw.index-msg(asdf, '$breakpoints'))
      );
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // mq.larger-than($breakpoint) [Mixin]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('larger-than()') {
    // Correct
    @include it('Creates a media query when the input is correct.') {
      @include assert() {
        @include output() {
          @media #{mq.larger-than(md)} {
            display: block;
          }
        }

        @include expect() {
          @media screen and (min-width: 40em) {
            display: block;
          }
        }
      }
    }
    // Incorrect
    @include it(
      '[Indexing Error] Throws when $breakpoint is not a key in $breakpoints.'
    ) {
      @include assert-equal(
        mq.larger-than(asdf),
        throw.error(throw.index-msg(asdf, '$breakpoints'))
      );
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // mq.smaller-than($breakpoint) [Mixin]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('smaller-than()') {
    // Correct
    @include it('Creates a media query when the input is correct.') {
      @include assert() {
        @include output() {
          @media #{mq.smaller-than(lg)} {
            display: block;
          }
        }

        @include expect() {
          @media screen and (max-width: 99.9375em) {
            display: block;
          }
        }
      }
    }
    // Incorrect
    @include it(
      '[Indexing Error] Throws when $breakpoint is not a key in $breakpoints.'
    ) {
      @include assert-equal(
        mq.smaller-than(asdf),
        throw.error(throw.index-msg(asdf, '$breakpoints'))
      );
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // mq.between($breakpoint) [Mixin]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('between()') {
    // Correct
    @include it('Creates a media query when the input is correct.') {
      @include assert() {
        @include output() {
          @media #{mq.between(sm, lg)} {
            display: block;
          }
        }

        @include expect() {
          @media screen and (min-width: 0em) and (max-width: 99.9375em) {
            display: block;
          }
        }
      }
    }
    // Incorrect start
    @include it(
      '[Indexing Error] Throws when $breakpoint-start is not a key in $breakpoints.'
    ) {
      @include assert-equal(
        mq.between(asdf, md),
        throw.error(throw.index-msg(asdf, '$breakpoints'))
      );
    }
    // Incorrect start
    @include it(
      '[Indexing Error] Throws when $breakpoint-end is not a key in $breakpoints.'
    ) {
      @include assert-equal(
        mq.between(sm, asdf),
        throw.error(throw.index-msg(asdf, '$breakpoints'))
      );
    }
    // Same value
    @include it(
      '[Indexing Error] Throws when $breakpoint-start and $breakpoint-end are equal.'
    ) {
      @include assert-equal(
        mq.between(sm, sm),
        throw.error(throw.value-msg(sm, 'different breakpoints'))
      );
    }
  }
}
