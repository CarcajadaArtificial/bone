//   __  __        _ _         ___               _
//  |  \/  |___ __| (_)__ _   / _ \ _  _ ___ _ _(_)___ ___
//  | |\/| / -_) _` | / _` | | (_) | || / -_) '_| / -_|_-<
//  |_|  |_\___\__,_|_\__,_|  \__\_\\_,_\___|_| |_\___/__/
//
// =====================================================================================================
@use 'sass:map';
@use 'sass:list';
@use '../lib/sass-door' as *;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This variable controls what media type is targeted by default, "screen" (if true) or "all" (if
/// false).
///
/// @group media-queries
///
$query-screen: true !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Every media query is built to avoid overlapping with one another. That's why all those values within
/// the max-width media feature will have this amount subtracted. It's meant to symbolize the value of 1/
/// 16, which happens to be 1px in relation to 1em.
///
/// @group media-queries
///
$until-substracted-amount: 0.0625em !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Generates a media query string.
///
/// @param {em|null} $from
///   The minimum width value for the media query. If null, the minimum width will not be included.
///
/// @param {em|null} $until
///   The maximum width value for the media query. If null, the maximum width will not be included.
///
/// @returns {string}
///   The generated media query string.
///
/// @group media-queries
///
@function query($from: null, $until: null) {
  @if (not check($from, ('em', 'null'))) {
    @return throw(value-msg($from, 'em|null'));
  }
  @if (not check($until, ('em', 'null'))) {
    @return throw(value-msg($until, 'em|null'));
  }

  $screen-section: '#{if($query-screen, "screen", "all")}';
  $from-section: '#{if($from, " and (min-width: #{$from})", "")}';
  $until-section: '#{if($until, " and (max-width: #{$until - $until-substracted-amount})", "")}';
  @return '#{$screen-section}#{$from-section}#{$until-section}';
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Applies a media query string. Useful for creating a query using the returned string of a function.
/// `@include media(fn()) {}` replaces `@media #{fn()} {}`
///
/// @param {string} $query
///   The media query string to apply.
///
/// @content
///   The styles to apply within the media query.
///
/// @group media-queries
///
@mixin media($query) {
  @if check($query, 'string') {
    @include quick-mq($query) {
      @content;
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The `only-on` function is a Sass utility that allows you to create media queries for specific breakpoints defined in the `$breakpoint-map` map. The function uses the @media rule to create a media query that applies the enclosed styles only when the specified breakpoint is active
///
/// @param {string} $breakpoint-map
///   The map containing all the breakpoints.
///
/// @param {string} $breakpoint
///   One of the keys in the `$breakpoint-map` map.
///
/// @group media-queries
///
/// @todo Validate parameter types.
///
@function only-on($breakpoint-map, $breakpoint) {
  @if not map.has-key($breakpoint-map, $breakpoint) {
    @return throw(index-msg($breakpoint, '$breakpoints'));
  }

  $start: map.get($breakpoint-map, $breakpoint);
  $end: map.get($breakpoint-map, map-next-key($breakpoint-map, $breakpoint));
  @if $end == null {
    @return query($start);
  } @else if $start == 0em {
    @return query($until: $end);
  } @else {
    @return query($start, $end);
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function generates a media query with a `min-width` based on the value associated with the provided `$breakpoint` key in the `$breakpoints` map. It can be used to apply styles for screens larger than a specific breakpoint.
///
/// @param {string} $breakpoint-map
///   The map containing all the breakpoints.
///
/// @param {string} $breakpoint
///   One of the keys in the `$breakpoints` map.
///
/// @group media-queries
///
/// @todo Validate parameter types.
///
@function larger-than($breakpoint-map, $breakpoint) {
  @if not map.has-key($breakpoint-map, $breakpoint) {
    @return throw(index-msg($breakpoint, '$breakpoints'));
  }

  @return query(map.get($breakpoint-map, $breakpoint));
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function generates a media query with a `max-width` based on the value associated with the provided `$breakpoint` key in the `$breakpoints` map. It can be used to apply styles for screens smaller than a specific breakpoint.
///
/// @param {string} $breakpoint-map
///   The map containing all the breakpoints.
///
/// @param {string} $breakpoint
///   One of the keys in the `$breakpoints` map.
///
/// @group media-queries
///
/// @todo Validate parameter types.
///
@function smaller-than($breakpoint-map, $breakpoint) {
  @if not map.has-key($breakpoint-map, $breakpoint) {
    @return throw(index-msg($breakpoint, '$breakpoint-map'));
  }

  @return query($until: map.get($breakpoint-map, $breakpoint));
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function generates media queries with the specified min-width and max-width values based on a `$breakpoints` map. It is designed to simplify the process of creating responsive styles by allowing developers to easily define media queries using named breakpoints instead of specific pixel values.
///
/// @param {string} $breakpoint-map
///   The map containing all the breakpoints.
///
/// @param {string} $breakpoint-start
///   One of the keys in the `$breakpoints` map.
///
/// @param {string} $breakpoint-end
///   One of the keys in the `$breakpoints` map.
///
/// @group media-queries
///
/// @todo Validate parameter types.
/// @todo $breakpoint-start > $breakpoint-end.
///
@function between($breakpoint-map, $breakpoint-start, $breakpoint-end) {
  @if not map.has-key($breakpoint-map, $breakpoint-start) {
    @return throw(index-msg($breakpoint-start, '$breakpoint-map'));
  } @else if not map.has-key($breakpoint-map, $breakpoint-end) {
    @return throw(index-msg($breakpoint-end, '$breakpoint-map'));
  } @else if $breakpoint-start == $breakpoint-end {
    @return throw(value-msg($breakpoint-end, 'different breakpoints'));
  }

  @return query(map.get($breakpoint-map, $breakpoint-start), map.get($breakpoint-map, $breakpoint-end));
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin generates CSS media queries based on a map of query names and corresponding query strings.
///
/// @param {map} $query-map A map containing the media queries to turn into classes.
///
/// @group media-queries
///
/// @todo Validate parameter types.
///
@mixin build-queries($query-map) {
  @each $name, $query in $query-map {
    .mq-#{$name} {
      display: none;

      @media #{$query} {
        display: block;
      }
    }
  }
}
