//    ___     _    _
//   / __|_ _(_)__| |
//  | (_ | '_| / _` |
//   \___|_| |_\__,_|
//
// =====================================================================================================
@use 'sass:map';
@use 'sass:math';
@use 'sass:list';
@use '../lib/sass-door' as *;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The x() function simplifies the multiplication of the basic unit. Instead of writing `$u * .5`, one can use `x(.5)`
///
/// @param {unitless} $mult
///
/// @return {em} $u * $mult
///
/// @group grid
///
/// @todo check parameter type
///
@function x($mult) {
  @return $layout-unit * $mult;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $layout-unit variable is a value that represent the basic unit of measurement for layouts.
///
/// @type em [1.5em]
///
/// @group grid
///
$layout-unit: 1.5em !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $class-name-grid variable sets the name for the grid CSS class.
///
/// @type string ['grid']
///
/// @group grid
///
$class-name-grid: 'grid' !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $class-name-layout variable sets the name for the layout- prefix in CSS classes.
///
/// @type string ['layout']
///
/// @group grid
///
$class-name-layout: 'layout' !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin creates the `.grid` CSS class using a list of grids schemas.
///
/// @param {list} $grid-schemas - This parameter contains the list of grid schemas, see more in the variable `$grid-schemas`.
///
/// @group grid
///
@mixin build-grid($grid-schemas, $use-classes: false) {
  @include conditional-selector('.#{$class-name-grid}', 'section', $use-classes) {
    display: grid;
    @each $schema in $grid-schemas {
      @include quick-mq(map-get($schema, mq)) {
        @if map-get($schema, fixedcol) == true {
          @include grid-schema(
            $cols: map-get($schema, cols),
            $gutter: map-get($schema, gutter),
            $colwidth: map-get($schema, colwidth),
            $fixedcol: true
          );
        } @else {
          @include grid-schema(
            $cols: map-get($schema, cols),
            $gutter: map-get($schema, gutter),
            $colwidth: map-get($schema, colwidth),
            $fixedcol: false,
            $width: map-get($schema, width),
            $margin: map-get($schema, margin)
          );
        }
      }
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Auxiliary for the `build-grid()` mixin. This one applies common styles for `gap`, `width`, `margin`, and `grid-template-columns`.
///
/// @param {unitless} $cols - `grid-template-columns: repeat($cols, ...);`
/// @param {length/percentage} $gutter - `gap: $gutter;`
/// @param {length/percentage} $colwidth - `grid-template-columns: repeat(..., minmax($colwidth, 1fr));`
/// @param {bool} $fixedcol - True: `minmax($colwidth, $colwidth)` False: `minmax($colwidth, 1fr)`
/// @param {length/percentage/keyword} $width [min-content] - `width: $width;`
/// @param {length/percentage/auto} $margin [auto] - `margin: 0 $margin;`
///
/// @group grid
///
@mixin grid-schema($cols, $gutter, $colwidth, $fixedcol, $width: min-content, $margin: auto) {
  gap: $gutter;
  width: $width;
  margin: 0 $margin;

  @if $fixedcol == true {
    grid-template-columns: repeat($cols, minmax($colwidth, $colwidth));
  } @else {
    grid-template-columns: repeat($cols, minmax($colwidth, 1fr));
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin creates the `.layout-#{}` CSS classes using a map of layout schemes.
///
/// @param {map} $layout-schemas
///   This parameter contains the map of layout schemas, see more in the variable $layout-schemas.
///
/// @group grid
///
@mixin build-all-layouts($layout-schemas) {
  @each $name, $schema in $layout-schemas {
    .#{$class-name-layout}-#{$name} {
      @include build-layout($schema, false);
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group grid
///
/// @todo check parameter types
///
@mixin build-layout($schema, $use-classes: false) {
  @if $use-classes {
    .#{$class-name-layout}-module {
      @include grid-column(map-get($schema, span), map-get($schema, offset));
      @include layout-variations(map-get($schema, variations));
    }
  } @else {
    section > article {
      @include grid-column(map-get($schema, span), map-get($schema, offset));
      @include layout-variations(map-get($schema, variations));
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Auxiliary for the `build-layouts()` mixin. This one applies the common styles using the `grid-column()` mixin.
///
/// @param {list} $variations - This paramter should be a `variations` property inside a layout schema.
///
/// @group grid
///
@mixin layout-variations($variations) {
  @each $variation in $variations {
    @include quick-mq(map-get($variation, mq)) {
      @include quick-pseudo(map-get($variation, pseudo)) {
        @include grid-column(map-get($variation, span), map-get($variation, offset));
      }
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin eases the use of the `grid-column` style.
///
/// @param {unitless} $span - `grid-column: span $span;`
/// @param {unitless} $offset - `grid-column: $offset/span $span;`
///
/// @group util
///
@mixin grid-column($span, $offset: 0) {
  @if $offset == 0 {
    grid-column: span $span;
  } @else {
    grid-column: $offset/span $span;
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin creates the `.layout-module-$span` CSS classes based on the grid schematic with the greatest number of columns.
///
/// @param {list} $grid-schemas - This parameter contains the list of grid schemas, see more in the variable `$grid-schemas`.
///
/// @group grid
///
@mixin build-modules($grid-schemas) {
  $highest-col: 0;
  @each $schema in $grid-schemas {
    $cols: map-get($schema, cols);
    @if $cols > $highest-col {
      $highest-col: $cols;
    }
  }

  @for $col from 1 through $highest-col {
    .#{$class-name-layout}-module-#{$col} {
      grid-column: span $col;
    }
  }
}
