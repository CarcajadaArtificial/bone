//    ___     _    _
//   / __|_ _(_)__| |
//  | (_ | '_| / _` |
//   \___|_| |_\__,_|
//
// =====================================================================================================
@use 'sass:map';
@use 'sass:math';
@use 'sass:list';
@use '../lib/sass-door' as *;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $class-name-grid variable sets the name for the grid CSS class.
///
/// @type string ['grid']
///
/// @group grid
///
$class-name-grid: 'grid' !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $class-name-layout variable sets the name for the layout- prefix in CSS classes.
///
/// @type string ['layout']
///
/// @group grid
///
$class-name-layout: 'layout' !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
$i-grid-schema: (
  cols: 'unitless',
  gutter: (
    'rem',
    'pct',
  ),
  colwidth: (
    0,
    'rem',
  ),
  fixedcol: 'bool',
  width: (
    'auto',
    'rem',
    'null',
  ),
  mq: 'string',
  margin: 'any',
);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin creates the `.grid` CSS class using a list of grids schemas.
///
/// @param {list} $grid-schemas
///   This parameter contains the list of grid schemas, see more in the variable `$grid-schemas`.
///
/// @group grid
///
@mixin build-grid($grid-schemas, $use-classes: false) {
  @if check($grid-schemas, $i-grid-schema, true) and check($use-classes, 'bool') {
    @include conditional-selector('.#{$class-name-grid}', 'section', $use-classes) {
      display: grid;
      @each $schema in $grid-schemas {
        @include quick-mq(map-get($schema, mq)) {
          @if map-get($schema, fixedcol) == true {
            @include grid-schema(
              $cols: map-get($schema, cols),
              $gutter: map-get($schema, gutter),
              $colwidth: map-get($schema, colwidth),
              $fixedcol: true
            );
          } @else {
            @include grid-schema(
              $cols: map-get($schema, cols),
              $gutter: map-get($schema, gutter),
              $colwidth: map-get($schema, colwidth),
              $fixedcol: false,
              $width: map-get($schema, width),
              $margin: map-get($schema, margin)
            );
          }
        }
      }
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Auxiliary for the `build-grid()` mixin. This one applies common styles for `gap`, `width`, `margin`, and `grid-template-columns`.
///
/// @param {unitless} $cols - `grid-template-columns: repeat($cols, ...);`
/// @param {length/percentage} $gutter - `gap: $gutter;`
/// @param {length/percentage} $colwidth - `grid-template-columns: repeat(..., minmax($colwidth, 1fr));`
/// @param {bool} $fixedcol - True: `minmax($colwidth, $colwidth)` False: `minmax($colwidth, 1fr)`
/// @param {length/percentage/keyword} $width [min-content] - `width: $width;`
/// @param {length/percentage/auto} $margin [auto] - `margin: 0 $margin;`
///
/// @group grid
///
/// @todo Refactor parameters to a single map.
/// @todo Validate parameter types.
///
@mixin grid-schema($cols, $gutter, $colwidth, $fixedcol, $width: min-content, $margin: auto) {
  gap: 0 $gutter;
  width: $width;
  margin: 0 $margin;

  @if $fixedcol == true {
    grid-template-columns: repeat($cols, minmax($colwidth, $colwidth));
  } @else {
    grid-template-columns: repeat($cols, minmax($colwidth, 1fr));
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin creates the `.layout-#{}` CSS classes using a map of layout schemes.
///
/// @param {map} $layout-schemas
///   This parameter contains the map of layout schemas, see more in the variable $layout-schemas.
///
/// @group grid
///
/// @todo Validate parameter types.
///
@mixin build-all-layouts($layout-schemas) {
  @each $name, $schema in $layout-schemas {
    .#{$class-name-layout}-#{$name} {
      @include build-layout($schema, false);
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group grid
///
/// @todo Write documentation.
/// @todo Validate parameter types.
///
@mixin build-layout($schema, $use-classes: false) {
  @if $use-classes {
    .#{$class-name-layout}-module {
      @include grid-column(map-get($schema, span), map-get($schema, offset));
      @include layout-variations(map-get($schema, variations));
    }
  } @else {
    section > article {
      @include grid-column(map-get($schema, span), map-get($schema, offset));
      @include layout-variations(map-get($schema, variations));
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Auxiliary for the `build-layouts()` mixin. This one applies the common styles using the `grid-column()` mixin.
///
/// @param {list} $variations - This paramter should be a `variations` property inside a layout schema.
///
/// @group grid
///
/// @todo Validate parameter types.
///
@mixin layout-variations($variations) {
  @each $variation in $variations {
    @include quick-mq(map-get($variation, mq)) {
      @include quick-pseudo(map-get($variation, pseudo)) {
        @include grid-column(map-get($variation, span), map-get($variation, offset));
      }
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin eases the use of the `grid-column` style.
///
/// @param {unitless} $span
///   `grid-column: span $span;`
///
/// @param {unitless} $offset
///   `grid-column: $offset/span $span;`
///
/// @group grid
///
@mixin grid-column($span, $offset: 0) {
  @if check($span, 'unitless') and check($offset, 'unitless') {
    @if $offset == 0 {
      grid-column: span $span;
    } @else {
      grid-column: $offset/span $span;
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin creates the `.layout-module-$span` CSS classes based on the grid schematic with the greatest number of columns.
///
/// @param {list} $grid-schemas
///   This parameter contains the list of grid schemas, see more in the variable `$grid-schemas`.
///
/// @group grid
///
/// @todo Validate parameter types.
///
@mixin build-modules($grid-schemas) {
  $highest-col: 0;
  @each $schema in $grid-schemas {
    $cols: map-get($schema, cols);
    @if $cols > $highest-col {
      $highest-col: $cols;
    }
  }

  @for $col from 1 through $highest-col {
    .#{$class-name-layout}-module-#{$col} {
      grid-column: span $col;
    }
  }
}
