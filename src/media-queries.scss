//   __  __        _ _         ___               _
//  |  \/  |___ __| (_)__ _   / _ \ _  _ ___ _ _(_)___ ___
//  | |\/| / -_) _` | / _` | | (_) | || / -_) '_| / -_|_-<
//  |_|  |_\___\__,_|_\__,_|  \__\_\\_,_\___|_| |_\___/__/
//
// =====================================================================================================
@use 'sass:map';
@use 'sass:list';
@use 'util';
@use 'throw';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $breakpoints variable is a Sass map containing the screen sizes for different devices.
///
/// @prop {pixel} hand [1px]
///   A very small screen size, such as a small smartphone or smartwatch.
///
/// @prop {pixel} page [600px]
///   A small screen size, such as a large smartphone or a tablet in portrait mode.
///
/// @prop {pixel} book [900px]
///   A medium screen size, such as a small laptop or a tablet in landscape mode.
///
/// @prop {pixel} desk [1200px]
///   A large screen size, such as a large laptop or a low resolution monitor.
///
/// @prop {pixel} wide [1800px]
///   A very large screen size, such as high resolution monitors.
///
/// @type {[key]: Pixel}
///
/// @group media-queries
$breakpoints: (
  hand: 1px,
  page: 600px,
  book: 900px,
  desk: 1200px,
  wide: 1800px,
) !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The mq mixin is a simple utility in Sass that generates a media query with a given query string and wraps the content inside it.
///
/// @param {string} $query [null]
///   A string representing the media query to be generated.
///
/// @example scss
///   @include mq.mq('print') {
///     .element {
///       display: block;
///     }
///   }
///
/// @example css
///   @media print {
///     .element {
///       display: block;
///     }
///   }
///
/// @group media-queries
@mixin mq($query: null) {
  @if (type-of($query) == string) and not ($query == '') {
    @media #{$query} {
      @content;
    }
  } @else {
    @include throw.error(throw.value-msg($query, 'string and not empty'));
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The `only-on` mixin is a Sass utility that allows you to create media queries for specific breakpoints defined in the `$breakpoints` map. The mixin uses the @media rule to create a media query that applies the enclosed styles only when the specified breakpoint is active
///
/// @param {string} $breakpoint
///   One of the keys in the `$breakpoints` map.
///
/// @example scss
///   @include mq.only-on('book') {
///     .element {
///       display: block;
///     }
///   }
///
/// @example css
///   @media screen and (min-width: 900px) and (max-width: 1199px) {
///     .element {
///       display: block;
///     }
///   }
///
/// @group media-queries
@mixin only-on($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $breakpoint-start: map.get($breakpoints, $breakpoint);
    $breakpoint-end: map.get(
      $breakpoints,
      util.next-key-in-map($breakpoints, $breakpoint)
    );
    @if $breakpoint-end == null {
      @include mq('screen and (min-width: #{$breakpoint-start})') {
        @content;
      }
    } @else if $breakpoint-start == 1px {
      @include mq('screen and (max-width: #{$breakpoint-end - 1px})') {
        @content;
      }
    } @else {
      @include mq(
        'screen and (min-width: #{$breakpoint-start}) and (max-width: #{$breakpoint-end - 1px})'
      ) {
        @content;
      }
    }
  } @else {
    @include throw.error(throw.index-msg($breakpoint, '$breakpoints'));
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin generates a media query with a `min-width` based on the value associated with the provided `$breakpoint` key in the `$breakpoints` map. It can be used to apply styles for screens larger than a specific breakpoint.
///
/// @param {string} $breakpoint
///   One of the keys in the `$breakpoints` map.
///
/// @example scss
///   @include mq.larger-than('book') {
///     .element {
///       display: block;
///     }
///   }
///
/// @example css
///   @media screen and (min-width: 900px) {
///     .element {
///       display: block;
///     }
///   }
///
/// @group media-queries
@mixin larger-than($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @include mq(
      'screen and (min-width: #{map.get($breakpoints, $breakpoint)})'
    ) {
      @content;
    }
  } @else {
    @include throw.error(throw.index-msg($breakpoint, '$breakpoints'));
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin generates a media query with a `max-width` based on the value associated with the provided `$breakpoint` key in the `$breakpoints` map. It can be used to apply styles for screens smaller than a specific breakpoint.
///
/// @param {string} $breakpoint
///   One of the keys in the `$breakpoints` map.
///
/// @example scss
///   @include mq.smaller-than('book') {
///     .element {
///       display: block;
///     }
///   }
///
/// @example css
///   @media screen and (max-width: 899px) {
///     .element {
///       display: block;
///     }
///   }
///
/// @group media-queries
@mixin smaller-than($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @include mq(
      'screen and (max-width: #{map.get($breakpoints, $breakpoint) - 1px})'
    ) {
      @content;
    }
  } @else {
    @include throw.error(throw.index-msg($breakpoint, '$breakpoints'));
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin generates media queries with the specified min-width and max-width values based on a `$breakpoints` map. It is designed to simplify the process of creating responsive styles by allowing developers to easily define media queries using named breakpoints instead of specific pixel values.
///
/// @param {string} $breakpoint-start
///   One of the keys in the `$breakpoints` map.
///
/// @param {string} $breakpoint-end
///   One of the keys in the `$breakpoints` map.
///
/// @example scss
///   @include mq.between('book', 'desk') {
///     .element {
///       display: block;
///     }
///   }
///
/// @example css
///   @media screen and (min-width: 900px) and (max-width: 1199px) {
///     .element {
///       display: block;
///     }
///   }
///
/// @group media-queries
@mixin between($breakpoint-start, $breakpoint-end) {
  @if not map.has-key($breakpoints, $breakpoint-start) {
    @include throw.error(throw.index-msg($breakpoint-start, '$breakpoints'));
  } @else if not map.has-key($breakpoints, $breakpoint-end) {
    @include throw.error(throw.index-msg($breakpoint-end, '$breakpoints'));
  } @else if $breakpoint-start == $breakpoint-end {
    @include throw.error(
      throw.value-msg($breakpoint-end, 'different breakpoints')
    );
  } @else {
    @include mq(
      'screen and (min-width: #{map.get($breakpoints, $breakpoint-start)}) and (max-width: #{map.get($breakpoints, $breakpoint-end) - 1px})'
    ) {
      @content;
    }
  }
}
