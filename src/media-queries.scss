//   __  __        _ _         ___               _
//  |  \/  |___ __| (_)__ _   / _ \ _  _ ___ _ _(_)___ ___
//  | |\/| / -_) _` | / _` | | (_) | || / -_) '_| / -_|_-<
//  |_|  |_\___\__,_|_\__,_|  \__\_\\_,_\___|_| |_\___/__/
//
// =====================================================================================================
@use 'sass:map';
@use 'sass:list';
@use 'utils' as *;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $breakpoints variable is a Sass map containing the screen sizes for different devices.
///
/// @type {[key]: em}
///
/// @group media-queries
$breakpoints: (
  sm: 0em,
  md: 40em,
  lg: 100em,
) !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The `only-on` function is a Sass utility that allows you to create media queries for specific breakpoints defined in the `$breakpoints` map. The function uses the @media rule to create a media query that applies the enclosed styles only when the specified breakpoint is active
///
/// @param {string} $breakpoint
///   One of the keys in the `$breakpoints` map.
///
/// @group media-queries
///
@function only-on($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $start: map.get($breakpoints, $breakpoint);
    $end: map.get($breakpoints, next-key-in-map($breakpoints, $breakpoint));
    @if $end == null {
      @return 'screen and (min-width: #{$start})';
    } @else if $start == 0em {
      @return 'screen and (max-width: #{$end - 0.0625em})';
    } @else {
      @return 'screen and (min-width: #{$start}) and (max-width: #{$end - 0.0625em})';
    }
  } @else {
    @return panic(index-msg($breakpoint, '$breakpoints'));
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function generates a media query with a `min-width` based on the value associated with the provided `$breakpoint` key in the `$breakpoints` map. It can be used to apply styles for screens larger than a specific breakpoint.
///
/// @param {string} $breakpoint
///   One of the keys in the `$breakpoints` map.
///
/// @group media-queries
///
@function larger-than($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @return 'screen and (min-width: #{map.get($breakpoints, $breakpoint)})';
  } @else {
    @return panic(index-msg($breakpoint, '$breakpoints'));
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function generates a media query with a `max-width` based on the value associated with the provided `$breakpoint` key in the `$breakpoints` map. It can be used to apply styles for screens smaller than a specific breakpoint.
///
/// @param {string} $breakpoint
///   One of the keys in the `$breakpoints` map.
///
/// @group media-queries
///
@function smaller-than($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @return 'screen and (max-width: #{map.get($breakpoints, $breakpoint) - 0.0625em})';
  } @else {
    @return panic(index-msg($breakpoint, '$breakpoints'));
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function generates media queries with the specified min-width and max-width values based on a `$breakpoints` map. It is designed to simplify the process of creating responsive styles by allowing developers to easily define media queries using named breakpoints instead of specific pixel values.
///
/// @param {string} $breakpoint-start
///   One of the keys in the `$breakpoints` map.
///
/// @param {string} $breakpoint-end
///   One of the keys in the `$breakpoints` map.
///
/// @group media-queries
///
@function between($breakpoint-start, $breakpoint-end) {
  @if not map.has-key($breakpoints, $breakpoint-start) {
    @return panic(index-msg($breakpoint-start, '$breakpoints'));
  } @else if not map.has-key($breakpoints, $breakpoint-end) {
    @return panic(index-msg($breakpoint-end, '$breakpoints'));
  } @else if $breakpoint-start == $breakpoint-end {
    @return panic(value-msg($breakpoint-end, 'different breakpoints'));
  } @else {
    $start-width: map.get($breakpoints, $breakpoint-start);
    $end-width: map.get($breakpoints, $breakpoint-end) - 0.0625em;
    @return 'screen and (min-width: #{$start-width}) and (max-width: #{$end-width})';
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $media-query-list variable is a Sass map containing common media query strings.
///
/// @type {[key]: string}
///
/// @group media-queries
///
$media-query-list: (
  only-sm: only-on(sm),
) !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin generates CSS media queries based on a list of query names and corresponding query strings.
///
/// @param {map} $query-list A map containing the media queries to turn into classes.
///
/// @group media-queries
///
@mixin build-queries($query-list: $media-query-list) {
  @each $name, $query in $query-list {
    .mq-#{$name} {
      display: none;

      @media #{$query} {
        display: block;
      }
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Change to false to avoid automatic css generation on this module.
///
/// @type bool
///
/// @group media-queries
///
$mq-auto-css: false !default;

// =====================================================================================================
// Automatic CSS generation
// =====================================================================================================
/// Generates media query classes.
///
/// @group media-queries
///
@if $mq-auto-css {
  @include build-queries();
}
