//   ___ _
//  / __(_)______
//  \__ \ |_ / -_)
//  |___/_/__\___|
//
// =====================================================================================================
@use '../lib/sass-door' as *;
@use 'sass:map';
@use 'sass:math';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// prettier-ignore
$scales: (
  double-octave:      4,
  pi:                 3.14159265359,
  major-twelfth:      3,
  major-eleventh:     2.66666666667,
  major-tenth:        2.5,
  octave:             2,
  major-seventh:      1.875,
  minor-seventh:      1.77777777778,
  major-sixth:        1.66666666667,
  golden-ratio:       1.61803398874,
  minor-sixth:        1.6,
  perfect-fifth:      1.5,
  augmented-fourth:   1.41421,
  perfect-fourth:     1.33333333333,
  major-third:        1.25,
  minor-third:        1.2,
  major-second:       1.125,
  minor-second:       1.06666666667,
) !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group sizes
///
$line-height-unit: 1.5rem !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group sizes
///
$box-spaces: (
  eighth: 0.125,
  quarter: 0.25,
  three-eights: 0.375,
  third: 0.3333333333,
  half: 0.5,
  five-eights: 0.625,
  two-thirds: 0.6666666666,
  three-quarters: 0.75,
  seven-eights: 0.875,
  base: 1,
  one-and-half: 1.5,
  double: 2,
  triple: 3,
  quadruple: 4,
) !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group sizes
///
@mixin build-box-spaces($base: 1rem) {
  @each $space, $multiplier in $box-spaces {
    --s-#{$space}: #{map-get($box-spaces, $space) * $base};
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group sizes
///
@mixin build-sizes($from: 0, $through: 0, $base: 1rem, $ratio: 1) {
  @for $i from $from through $through {
    $font-size: modular-scale($i, $base, $ratio);
    $line-height: closest-line-height($font-size);
    --fs#{$i}: #{$font-size};
    --lh#{$i}: #{$line-height};
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group sizes
///
@function modular-scale($value: 0, $base: 1rem, $ratio: 1) {
  $result: $base;
  $ratio: if(check-individual-type($ratio, 'unitless', true), $ratio, map.get($scales, $ratio));
  @if $value > 0 {
    @for $i from 1 through $value {
      $result: $result * $ratio;
    }
  } @else if $value < 0 {
    $value: $value * -1;
    @for $i from 0 through $value {
      $result: math.div($result, $ratio);
    }
  }
  @return $result;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group sizes
///
@function modular-scale-range($from: 0, $through: 0, $base: 1rem, $ratio: 1) {
  $range: ();
  @for $i from $from through $through {
    $ms: modular-scale($i, $base, $ratio);
    $range: append($range, $ms);
  }
  @return $range;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group sizes
///
@function closest-line-height($font-size) {
  $result: $line-height-unit;

  @while $result < ($font-size * 1.12) {
    $result: $result + $line-height-unit;
  }

  @return $result;
}
