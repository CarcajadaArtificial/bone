//   ___ _
//  / __(_)______
//  \__ \ |_ / -_)
//  |___/_/__\___|
//
// =====================================================================================================
@use 'sass:map';
@use 'sass:math';
@use 'lib/sassdoor' as *;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// prettier-ignore
$scales: (
  double-octave:      4,
  pi:                 3.14159265359,
  major-twelfth:      3,
  major-eleventh:     2.66666666667,
  major-tenth:        2.5,
  octave:             2,
  major-seventh:      1.875,
  minor-seventh:      1.77777777778,
  major-sixth:        1.66666666667,
  golden-ratio:       1.61803398874,
  minor-sixth:        1.6,
  perfect-fifth:      1.5,
  augmented-fourth:   1.41421,
  perfect-fourth:     1.33333333333,
  major-third:        1.25,
  minor-third:        1.2,
  major-second:       1.125,
  minor-second:       1.06666666667,
) !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// prettier-ignore
$box-spaces: (
  eighth:             0.125,
  quarter:            0.25,
  three-eights:       0.375,
  third:              0.3333333333,
  half:               0.5,
  five-eights:        0.625,
  two-thirds:         0.6666666666,
  three-quarters:     0.75,
  seven-eights:       0.875,
  single:             1,
  one-and-half:       1.5,
  double:             2,
  triple:             3,
  quadruple:          4,
  fifteen:            15,
) !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The concept of vertical rhythm is a design principle used to create a consistent and harmonious flow
/// of content on a page. It involves setting a base line height and then aligning all the elements on
/// the page to that baseline, creating a sense of visual continuity.
///
/// @group sizes
///
$vertical-rythm: 1.5rem !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Builds CSS custom properties for box spaces using a base value. `--s-name: X.XXXrem;`
///
/// @param {rem} $base [1rem]
///   The base value to multiply each box space by.
///
/// @group sizes
///
/// @todo Parameter type validation.
///
@mixin build-box-spaces($base: 1rem) {
  @each $space, $multiplier in $box-spaces {
    --s-#{$space}: #{map-get($box-spaces, $space) * $base};
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Builds CSS custom properties for font sizes and line heights using the provided SCSS mixin. The font
/// sizes (`--fsX: XX.Xrem`) are calculated using the `modular-scale` function on the `$base` parameter,
/// while the line heights (`--lhX: XXrem`) are calculated using the `closest-line-height` function that
/// leverages the `$vertical-rythm` variable.
///
/// @param {unitless} $from [0]
///   Starting value of the loop, can be a negative value for proportionally shorter sizes.
///
/// @param {unitless} $through [0]
///   Ending value of the loop, must be larger than `$from`.
///
/// @param {rem} $base [1rem]
///   The base value to use for the modular scale.
///
/// @param {unitless|string} $ratio [1]
///   The ratio to use for the modular scale, can be a unitless integer or an index value of the
///   variable `$scales`.
///
/// @group sizes
///
/// @todo Parameter type validation.
/// @todo $from < $through validation.
///
@mixin build-sizes($from: 0, $through: 0, $base: 1rem, $ratio: 1) {
  @for $i from $from through $through {
    $font-size: modular-scale($i, $base, $ratio);
    $line-height: closest-line-height($font-size);
    --fs#{$i}: #{$font-size};
    --lh#{$i}: #{$line-height};
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// A function that calculates and returns a value on a modular scale. A modular scale is a set of
/// values that increase or decrease proportionally, based on a fixed ratio. It is useful for creating
/// harmonious and consistent typography, spacing, and sizing throughout a design system.
///
/// @param {unitless} $steps [0]
///   The number of times on the `$ratio` will be multiplied (or divided if `$steps` is negative) to the
///   `$base` parameter.
///
/// @param {rem} $base [1rem]
///   The base value to use for the modular scale.
///
/// @param {unitless|string} $ratio [1]
///   The ratio to use for the modular scale, can be a unitless integer or an index value of the
///   variable `$scales`.
///
/// @group sizes
///
/// @todo Parameter type validation.
///
@function modular-scale($steps: 0, $base: 1rem, $ratio: 1) {
  $result: $base;
  $ratio: if(check-individual-type($ratio, 'unitless', true), $ratio, map.get($scales, $ratio));
  @if $steps > 0 {
    @for $i from 1 through $steps {
      $result: $result * $ratio;
    }
  } @else if $steps < 0 {
    $steps: $steps * -1;
    @for $i from 0 through $steps {
      $result: math.div($result, $ratio);
    }
  }
  @return $result;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// A function that calculates the closest line height based on a given font size and the vertical
/// rhythm.
///
/// @param {rem} $font-size [1rem]
///   The font size to use for calculating the line height.
///
/// @returns {rem}
///   The calculated line height value that is closest to the fixed line height (1.12 x font size) and
///   that is a multiple of the vertical rhythm.
///
/// @group sizes
///
/// @todo Parameter type validation.
///
@function closest-line-height($font-size: 1rem) {
  $result: $vertical-rythm;

  @while $result < ($font-size * 1.12) {
    $result: $result + $vertical-rythm;
  }

  @return $result;
}
