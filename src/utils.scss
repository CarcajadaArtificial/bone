//   _   _ _   _ _ _ _   _
//  | | | | |_(_) (_) |_(_)___ ___
//  | |_| |  _| | | |  _| / -_|_-<
//   \___/ \__|_|_|_|\__|_\___/__/
//
// =====================================================================================================
@use 'sass:map';
@use 'sass:list';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This variable sets the default value for whether error messages should be caught and displayed. It can be overridden to false to disable this feature.
///
/// @type bool
///
/// @group throw
///
$catching-enabled: false !default;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Simplifies error handling by generating a custom error message and throwing an exception.
///
/// @param {string} $message ['']
///   The content of the message to be displayed.
///
/// @param {bool} $catch [$catching-enabled]
///   Throws @error if true.
///
/// @return {string}
///   Returns the `$message` by default.
///
/// @throw
///   The global throw, this is what every exception will use to handle an error.
///
/// @group throw
///
@function panic($message: '', $catch: $catching-enabled) {
  @if $catch {
    @error $message;
  }
  @return $message;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin does what the function `panic()` does, but applied to a `--garlicss-error` property.
///
/// @param {string} $message -
///   The content of the message to be displayed.
///
/// @param {bool} $catch [$catching-enabled]
///   Throws @error if true.
///
/// @group throw
///
@mixin panic($message, $catch: $catching-enabled) {
  --garlicss-error: '#{panic($message, $catch)}';
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Creates a `(Value Error)`, these are used for incorrect values (e.g. incorrect types, values out of a range, not null, a string with a wrong format, etc).
///
/// @param {string} $value [null]
///   The incorrect value.
///
/// @param {string} $expected [null]
///   A guide on what the correct value must be.
///
/// @group throw
///
@function value-msg($value, $expected) {
  @return '(Value Error) The value #{$value} is invalid. Expected: #{$expected}';
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Creates an `(Indexing Error)`, these are used for missing keys or values that must be present on a map or a list.
///
/// @param {string} $key [null]
///   The key or value that wasn't found.
///
/// @param {string} $container [null]
///   The list or map there `$key` wasn't found.
///
/// @group throw
///
@function index-msg($key, $container) {
  @return '(Indexing Error) The value #{$key} was not found inside #{$container}';
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Returns the next key in a map given the current key. Returns null if `$current-key` is the last. It throws an error if the current key is not found in the map.
///
/// @param {map} $map [null]
///   The map to be searched.
///
/// @param {string} $current-key [null]
///   The current key in the map.
///
/// @group util
@function next-key-in-map($map, $current-key) {
  @if not(type-of($map) == 'map') {
    @return panic(value-msg($map, 'map'));
  } @else if not(type-of($current-key) == 'string') {
    @return panic(value-msg($current-key, 'string'));
  } @else if not(map.has-key($map, $current-key)) {
    @return panic(index-msg($current-key, '$map'));
  }
  $keys: map.keys($map);
  $current-index: list.index($keys, $current-key);
  @if $current-index == list.length($keys) {
    @return null;
  }
  @return list.nth($keys, $current-index + 1);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Turns the first letter of a word into uppercase.
///
/// @param {string} $string -
///   The word that is going to be capitalized.
///
/// @example scss - Sass
///   p {
///     &::after {
///       content: capitalize(word);
///     }
///   }
///
/// @example css - Compiled CSS
///   p::after {
///     content: "Word";
///   }
///
/// @group util
///
@function capitalize($string) {
  @if not(type-of($string) == 'string') {
    @return panic(value-msg($string, 'string'));
  }
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin optionally applies a media query depending on the value.
///
/// @param {string/null} $mq - If this value is null, simply returns the content.
///
/// @group util
///
@mixin quick-mediaquery($mq) {
  @if $mq == null {
    @content;
  } @else {
    @media #{$mq} {
      @content;
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin optionally applies a pseudoclass depending on the value.
///
/// @param {string/null} $psuedo - If this value is null, simply returns the content.
///
/// @group util
///
@mixin quick-pseudoclass($pseudo) {
  @if $pseudo == null {
    @content;
  } @else {
    &#{$pseudo} {
      @content;
    }
  }
}
