//   _   _ _   _ _ _ _   _
//  | | | | |_(_) (_) |_(_)___ ___
//  | |_| |  _| | | |  _| / -_|_-<
//   \___/ \__|_|_|_|\__|_\___/__/
//
// =====================================================================================================
@use 'sass:map';
@use 'sass:list';
@use 'throw';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Returns the next key in a map given the current key. Returns null if `$current-key` is the last. It throws an error if the current key is not found in the map.
///
/// @param {map} $map [null]
///   The map to be searched.
///
/// @param {string} $current-key [null]
///   The current key in the map.
///
/// @group util
@function next-key-in-map($map, $current-key) {
  @if not(type-of($map) == 'map') {
    @return throw.error(throw.value-msg($map, 'map'));
  } @else if not(type-of($current-key) == 'string') {
    @return throw.error(throw.value-msg($current-key, 'string'));
  } @else if not(map.has-key($map, $current-key)) {
    @return throw.error(throw.index-msg($current-key, '$map'));
  }
  $keys: map.keys($map);
  $current-index: list.index($keys, $current-key);
  @if $current-index == list.length($keys) {
    @return null;
  }
  @return list.nth($keys, $current-index + 1);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Turns the first letter of a word into uppercase.
///
/// @param {string} $string -
///   The word that is going to be capitalized.
///
/// @example scss - Sass
///   p {
///     &::after {
///       content: capitalize(word);
///     }
///   }
///
/// @example css - Compiled CSS
///   p::after {
///     content: "Word";
///   }
///
/// @group util
///
@function capitalize($string) {
  @if not(type-of($string) == 'string') {
    @return throw.error(throw.value-msg($string, 'string'));
  }
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin optionally applies a media query depending on the value.
///
/// @param {string/null} $mq - If this value is null, simply returns the content.
///
/// @group util
///
@mixin quick-mediaquery($mq) {
  @if $mq == null {
    @content;
  } @else {
    @media #{$mq} {
      @content;
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///This mixin optionally applies a pseudoclass depending on the value.
///
/// @param {string/null} $mq - If this value is null, simply returns the content.
///
/// @group util
///
@mixin quick-pseudoclass($pseudo) {
  @if $pseudo == null {
    @content;
  } @else {
    &#{$pseudo} {
      @content;
    }
  }
}
