//    ___     _
//   / __|___| |___ _ _
//  | (__/ _ \ / _ \ '_|
//   \___\___/_\___/_|
//
// =====================================================================================================
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:color';
@use '../lib/sass-door' as *;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin creates dark and light variations of the same theme. Dark color scheme is default.
///
/// @param {map} $palette
///   This map contains the list of colors available for theme generation. The keys must be the names of
///     the colors and the map's value must be the color value itself.
///
/// @param {string} $personality
///   The name of the color that will be used as the website idenitity.
///
/// @param {string} $dark-bg
///   The name of the background of the website's body in a dark color scheme.
///
/// @param {string} $light-bg
///   The name of the background of the website's body in a light color scheme.
///
/// @content
///   This mixin will create a series of css variables that work as the theme's areas of effect.
///
/// @group color
///
@mixin build-dual-theme($palette, $personality, $dark-bg, $light-bg) {
  body {
    @include build-theme($palette, $personality, $dark-bg);
    @include quick-mq('(prefers-color-scheme: light)') {
      @include build-theme($palette, $personality, $light-bg);
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin simplifies the complex process of building a cohesive theme.
///
/// @param {map} $palette
///   This map contains the list of colors available for theme generation. The keys must be the names of
///     the colors and the map's value must be the color value itself.
///
/// @param {string} $personality
///   The name of the color that will be used as the website idenitity.
///
/// @param {string} $background
///   The name of the background of the website's body.
///
/// @content
///   This mixin will create a series of css variables that work as the theme's areas of effect.
///
/// @group color
///
@mixin build-theme($palette, $personality, $background) {
  @if check-build-theme($palette, $personality, $background) {
    $palette-hex-list: map-values(map-remove($palette, $personality, $background));

    //  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    $hex-bg-page: map-get($palette, $background);
    --clr-bg-page: #{$hex-bg-page};

    //  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    $hex-txt-personality: map-get($palette, $personality);
    --clr-txt-personality: #{$hex-txt-personality};

    //  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    $hex-bg-panel: color-list-reduce(
      list-cut(color-list-sort($palette-hex-list, $hex-bg-page, 'color-compare-euclidean'), 3),
      $hex-bg-page,
      'color-compare-hue'
    );
    --clr-bg-panel: #{$hex-bg-panel};

    //  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    $hex-txt-base: color-list-reduce(
      list-cut(color-list-sort($palette-hex-list, $hex-bg-page, 'color-compare-contrast', false), 6),
      $hex-bg-page,
      'color-compare-hue'
    );
    --clr-txt-base: #{$hex-txt-base};

    //  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    $hex-border: $hex-txt-base;
    --clr-border: #{$hex-border};

    //  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    $hex-txt-error: color-list-reduce(
      color-list-filter(
        color-list-filter($palette-hex-list, 'color-is-red'),
        'color-is-contrasting',
        $hex-bg-page,
        7
      ),
      $hex-txt-personality,
      'color-compare-euclidean'
    );
    --clr-txt-error: #{$hex-txt-error};

    //  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    $txt-base-contrast-bg-page: color-compare-contrast($hex-bg-page, $hex-txt-base);
    $hex-bg-input: mix-until-contrasting(
      $hex-txt-personality,
      $hex-bg-page,
      $hex-txt-base,
      $txt-base-contrast-bg-page * 0.5
    );
    --clr-bg-input: #{$hex-bg-input};

    //  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    $hex-bg-disabled: mix-until-contrasting(
      $hex-txt-personality,
      $hex-bg-page,
      $hex-txt-base,
      $txt-base-contrast-bg-page * 0.8
    );
    --clr-bg-disabled: #{$hex-bg-disabled};

    //  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    $txt-error-contrast-bg-page: color-compare-contrast($hex-bg-page, $hex-txt-error);
    $hex-bg-error: mix-until-contrasting(
      $hex-txt-error,
      $hex-bg-page,
      $hex-txt-base,
      $txt-error-contrast-bg-page * 0.8
    );
    --clr-bg-error: #{$hex-bg-error};
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function checks if the arguments in the `build-theme()` function are correct.
///
/// @param {map} $palette
///   The `$palette` argument in `build-theme()`;
///
/// @param {string} $personality
///   The `$personality` argument in `build-theme()`;
///
/// @param {string} $background
///   The `$background` argument in `build-theme()`;
///
/// @returns {boolean}
///   True if the arguments are correct, false if they're not.
///
/// @group color
///
/// @todo check luminosity of background color to make sure it is a capable light or dark theme.
/// @todo check contrast between $personality and $background
///
@function check-build-theme($palette, $personality, $background) {
  @if check($palette, 'map') and check($personality, 'string') and check($background, 'string') {
    @if not map-has-key($palette, $personality) {
      $error: throw(index-msg($personality, $palette));
      @return false;
    } @else if not map-has-key($palette, $background) {
      $error: throw(index-msg($background, $palette));
      @return false;
    } @else {
      @return true;
    }
  } @else {
    @return false;
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function obtains the relative luminance of a color. (WCAG20)
///
/// @param {color} $color
///   The color whose relative luminance is to be obtained.
///
/// @returns {unitless}
///   The relative luminance of a color, from 0->1.
///
/// @group color
///
@function color-get-luminance($color) {
  @if not check($color, 'color') {
    @return -1;
  }

  $r: _luminance-index(color.red($color));
  $g: _luminance-index(color.green($color));
  $b: _luminance-index(color.blue($color));
  @return 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This is an auxiliary function for `color-get-luminance()`. It obtains a luminance index for an rgb
/// value.
///
/// @param {unitless} $value
///   An rgb value of a color.
///
/// @return {number}
///   The luminance index of that particular rgb value.
///
/// @group color
///
@function _luminance-index($value) {
  @if not check($value, 'unitless') {
    @return -1;
  }

  $channel: math.div($value, 255);
  @return if(
    $channel <= 0.03928,
    math.div($channel, 12.92),
    math.pow(math.div($channel + 0.055, 1.055), 2.4)
  );
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
///
/// @group color
///
/// @todo write documentation
///
@function mix-until-contrasting($base, $mixer, $contraster, $min-contrast) {
  @for $i from 1% through 99% {
    $new-color-mix: color.mix($mixer, $base, $i);

    @if color-compare-contrast($new-color-mix, $contraster) >= $min-contrast {
      @return $new-color-mix;
    }
  }

  @return $new-color-mix;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function calculates the Euclidean distance between two colors.
///
/// @param {color} $a
///   The first color.
///
/// @param {color} $b
///   The second color.
///
/// @return {number}
///   The distance between the colors.
///
/// @group color
///
@function color-compare-euclidean($a, $b) {
  @if check-color-compare-function($a, $b) {
    @return -1;
  }

  @if check($a, 'color') and check($b, 'color') {
    $r: math.pow(red($a) - red($b), 2);
    $g: math.pow(green($a) - green($b), 2);
    $b: math.pow(blue($a) - blue($b), 2);
    @return math.sqrt($r + $g + $b);
  } @else {
    @return -1;
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function compares the hue values of two colors.
///
/// @param {color} $a
///   The first color.
///
/// @param {color} $b
///   The second color.
///
/// @return {deg}
///   The difference between both numbers. (0-360)
///
/// @group color
///
@function color-compare-hue($a, $b) {
  @if check-color-compare-function($a, $b) {
    @return -1;
  }

  $hue-a: color.hue($a);
  $hue-b: color.hue($b);
  $difference: abs($hue-a - $hue-b);

  @return if($difference > 180, 360 - $difference, $difference);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function obtains the contrast ratio of two colors.
///
/// @param {color} $a
///   The first color.
///
/// @param {color} $b
///   The second color.
///
/// @return {unitless}
///   The contrast value of `$a` on `$b`, a unitless number between 1 and 21 that represents the
///   1:1->1:21 color contrast ratio range.
///
/// @group color
///
@function color-compare-contrast($a, $b) {
  @if check-color-compare-function($a, $b) {
    @return -1;
  }

  $a: color-get-luminance($a) + 0.05;
  $b: color-get-luminance($b) + 0.05;

  @return math.div(math.max($a, $b), math.min($a, $b));
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function checks the "redness" of a color.
///
/// @param {color} $color
///   The color that may be red.
///
/// @returns {bool}
///   True if the colors hue is: 0 <= hue >= 5 or 330 <= hue >= 360. #fff also returns true in this
///   conditions, but it is individually removed as it is pure white.
///
@function color-is-red($color) {
  @if $color == #fff {
    @return false;
  }
  $hue: color.hue($color);
  @return ($hue >= 0deg and $hue <= 5deg) or ($hue >= 330deg and $hue <= 360deg);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function checks if a pair of colors are contrasting enough.
///
/// @param {color} $a
///   The first color.
///
/// @param {color} $b
///   The second color.
///
/// @param {unitless} $contrast
///   The minimum contrast ratio.
///
/// @returns {bool}
///   True if the contrast between $a and $b >= $contrast.
///
@function color-is-contrasting($a, $b, $contrast) {
  @return color-compare-contrast($a, $b) >= $contrast;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Returns the color in a list that is closest to the base color, based on a given comparing function.
///
/// @param {list} $color-list
///   A list of colors to compare to the base color.
///
/// @param {color} $base
///   The base color to compare to the list of colors.
///
/// @param {string} $callback
///   A function that compares two colors and reduces their difference to a number.
///
/// @return {color}
///    The closest color to the base color in the list.
///
/// @group color
///
/// @todo Upgrade limitations, from only supporting callback functions with specifically ($a, $b) color
///   parameters, extend to any function with at least one color as parameter and spread parameter.
///
@function color-list-reduce($color-list, $base, $callback) {
  @if check-color-list-function($color-list, $base, $callback) {
    @return null;
  }

  $closest: null;
  $closest-difference: null;

  @each $color in $color-list {
    $color-difference: meta.call(get-function($callback), $color, $base);

    @if $closest-difference == null or $color-difference < $closest-difference {
      $closest-difference: $color-difference;
      $closest: $color;
    }
  }

  @return $closest;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function sorts a list of color based on a specific color and a comparing function.
///
/// @param {list} $color-list
///   A list of colors to compare to the base color.
///
/// @param {color} $base
///   The base color to compare to the list of colors.
///
/// @param {string} $callback
///   A function that compares two colors and reduces their difference to a number.
///
/// @param {bool} $ascending [true]
///   True for low->high order. False for high->low order.
///
/// @return {list}
///    An ordered copy of `$color-list` using a base color and a comparing function to sort.
///
/// @group color
///
/// @todo Upgrade limitations, from only supporting callback functions with specifically ($a, $b) color
///   parameters, extend to any function with at least one color as parameter and spread parameter.
///
@function color-list-sort($color-list, $base, $callback, $ascending: true) {
  @if check-color-list-function($color-list, $base, $callback) or not check($ascending, 'bool') {
    @return ();
  }

  $sorted-colors: ();

  @while list.length($color-list) > 0 {
    $min-color: null;
    $min-difference: null;
    $min-index: null;

    @each $color in $color-list {
      $color-difference: meta.call(get-function($callback), $color, $base);

      @if not
        $min-difference or
        ($ascending and $color-difference < $min-difference) or
        (not($ascending) and $color-difference > $min-difference)
      {
        $min-difference: $color-difference;
        $min-color: $color;
        $min-index: list.index($color-list, $color);
      }
    }

    $sorted-colors: append($sorted-colors, $min-color);
    $color-list: list-remove($color-list, $min-index);
  }

  @return $sorted-colors;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function retruns a list with all colors that make the callback function return true.
///
/// @param {list} $color-list
///   A list of colors to be filtered
///
/// @param {string} $callback
///   A function that uses a color paramater to return a boolean value.
///
/// @return {list}
///   A list containing all the values that produce a truthful value from the callback function.
///
/// @group color
///
@function color-list-filter($color-list, $callback, $params...) {
  $filtered-list: ();

  @each $color in $color-list {
    @if meta.call(get-function($callback), $color, $params...) {
      $filtered-list: append($filtered-list, $color);
    }
  }

  @return $filtered-list;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function quickly checks if a "`color-list`" function has correct parameters.
///
/// @param {list} $color-list
///   The "`color-list`" function's list of colors.
///
/// @param {color} $base
///   The "`color-list`" function's base color.
///
/// @param {string} $callback
///   The "`color-list`" function's callback name.
///
/// @return {bool}
///   True if the parameters are correct.
///
/// @group color
///
@function check-color-list-function($color-list, $base, $callback) {
  @if not(check($color-list, 'list') and check($base, 'color') and check($callback, 'string')) {
    @return false;
  }

  @if meta.function-exists($callback) {
    @return false;
  }

  @return true;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This function quickly checks if a "`color-compare`" function has correct parameters.
///
/// @param {color} $a
///   The "`color-compare`" function's first color.
///
/// @param {color} $b
///   The "`color-compare`" function's second color.
///
/// @return {bool}
///   True if the parameters are correct.
///
/// @group color
///
@function check-color-compare-function($a, $b) {
  @return not(check($a, 'color') and check($b, 'color'));
}

// =====================================================================================================
// Build Entire Palette
// =====================================================================================================
/// This mixin creates classes for every entry inside a color palette list. Builds a `.txt-#{color}` and
/// a `.bg-#{color}` classes for every entry.
///
/// @param {map} $palette
///   The map containing all the color palettes.
///
/// @param {bool} $use-variables
///   True: uses `var(--clr-#{$name})`. False: uses the actual color value in the palette.
///
/// @group color
///
@mixin build-entire-palette($palette, $use-variables: true) {
  @if $use-variables {
    :root {
      @include build-color-variables($palette);
    }
  }
  @include build-color-backgrounds($palette, $use-variables);
  @include build-color-text($palette, $use-variables);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin easily generates CSS variables in the document's root for every color in the palette.
///
/// @param {map} $palette
///   The map containing all the color palettes.
///
/// @group color
///
@mixin build-color-variables($palette) {
  @each $name, $color in $palette {
    --clr-#{$name}: #{$color};
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin generates CSS classes for quickly accessing every color background.
///
/// @param {map} $palette
///   The map containing all the color palettes.
///
/// @param {bool} $use-variables
///   True: uses `var(--clr-#{$name})`. False: uses the actual color value in the palette.
///
/// @group color
///
@mixin build-color-backgrounds($palette, $use-variables: true) {
  @each $name, $color in $palette {
    .clr-#{$name} {
      @if $use-variables {
        background: var(--clr-#{$name});
      } @else {
        background: #{$color};
      }
    }
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This mixin generates CSS classes for quickly accessing every text color.
///
/// @param {map} $palette
///   The map containing all the color palettes.
///
/// @param {bool} $use-variables
///   True: uses `var(--clr-#{$name})`. False: uses the actual color value in the palette.
///
/// @group color
///
@mixin build-color-text($palette, $use-variables: true) {
  @each $name, $color in $palette {
    .txt-#{$name} {
      @if $use-variables {
        color: var(--clr-#{$name});
      } @else {
        color: #{$color};
      }
    }
  }
}
